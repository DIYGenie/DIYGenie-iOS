import SwiftUI

/// A detailed view for a single project.
///
/// This screen shows the before/after images (if available), basic project info,
/// provides a button to open the full build plan, displays a summary of the
/// plan once it has been generated by the backend, and includes placeholders
/// for scanned room dimensions and manual measurements.  It gracefully handles
/// projects whose plan is not yet ready, showing a placeholder instead of
/// throwing an error.
struct ProjectDetailsView: View {
    let project: Project

    @State private var plan: PlanResponse?
    @State private var isLoadingPlan: Bool = false
    @State private var showPreview: Bool = true
    @State private var showDetailedPlan: Bool = false
    @State private var alertMessage: String = ""
    @State private var showAlert: Bool = false
    /// Summary of the scanned room (area, wall count, openings count).
    @State private var roomSummary: RoomSummary = RoomSummary(area: nil, wallCount: nil, openingsCount: nil)
    /// Distances captured by the manual measure tool (in metres).
    @State private var measurements: [Double] = []

    private let projectsService = ProjectsService(userId: "99198c4b-8470-49e2-895c-75593c5aa181")

    var body: some View {
        ScrollView {
            VStack(alignment: .leading, spacing: 16) {
                // Hero image with optional before/after toggle
                if let previewURL = project.previewURL {
                    Picker("", selection: $showPreview) {
                        Text("After").tag(true)
                        Text("Before").tag(false)
                    }
                    .pickerStyle(.segmented)
                    .padding(.top)

                    let heroURL = showPreview ? previewURL : (project.inputImageURL ?? previewURL)
                    AsyncImage(url: heroURL) { image in
                        image.resizable().scaledToFill()
                    } placeholder: {
                        Rectangle().fill(Color.gray.opacity(0.2))
                    }
                    .frame(height: 220)
                    .clipped()
                    .cornerRadius(12)
                } else if let inputURL = project.inputImageURL {
                    AsyncImage(url: inputURL) { image in
                        image.resizable().scaledToFill()
                    } placeholder: {
                        Rectangle().fill(Color.gray.opacity(0.2))
                    }
                    .frame(height: 220)
                    .clipped()
                    .cornerRadius(12)
                }

                // Project name
                Text(project.name)
                    .font(.title2.bold())
                    .padding(.top, 8)

                // Button to open the full build plan
                Button(action: {
                    if plan != nil {
                        showDetailedPlan = true
                    } else {
                        alertMessage = "The detailed plan is not available yet. Please wait for it to be generated."
                        showAlert = true
                    }
                }) {
                    Text("Open Detailed Build Plan")
                        .frame(maxWidth: .infinity, minHeight: 50)
                        .background(Color.purple)
                        .foregroundColor(.white)
                        .cornerRadius(16)
                }
                .padding(.vertical)

                // Room dimensions section
                VStack(alignment: .leading, spacing: 8) {
                    Text("Dimensions")
                        .font(.headline)
                    Text("Area: \(roomSummary.formattedArea)")
                    Text("Walls: \(roomSummary.formattedWalls)")
                    Text("Openings: \(roomSummary.formattedOpenings)")
                }
                .padding(.top, 12)

                // Manual measurements section
                VStack(alignment: .leading, spacing: 8) {
                    Text("Measurements")
                        .font(.headline)
                    if measurements.isEmpty {
                        Text("No measurements yet")
                            .foregroundColor(.secondary)
                    } else {
                        ForEach(measurements.indices, id: \.self) { index in
                            Text(String(format: "Measurement %d: %.2f m", index + 1, measurements[index]))
                                .font(.body)
                        }
                    }
                }
                .padding(.top, 12)

                // Display plan summary sections if the plan is loaded
                if let plan = plan {
                    // Overview (use the first step as a summary if available)
                    if let firstStep = plan.steps.first {
                        VStack(alignment: .leading, spacing: 8) {
                            Text("Overview")
                                .font(.headline)
                            Text(firstStep)
                                .foregroundColor(.primary)
                        }
                        .padding(.top, 12)
                    }

                    // Materials and tools
                    if !plan.materials.isEmpty || !plan.tools.isEmpty {
                        VStack(alignment: .leading, spacing: 8) {
                            Text("Materials + Tools")
                                .font(.headline)
                            if !plan.materials.isEmpty {
                                Text("Materials:")
                                    .fontWeight(.semibold)
                                ForEach(plan.materials, id: \.self) { item in
                                    Text("• \(item)")
                                }
                            }
                            if !plan.tools.isEmpty {
                                Text("Tools:")
                                    .fontWeight(.semibold)
                                    .padding(.top, plan.materials.isEmpty ? 0 : 8)
                                ForEach(plan.tools, id: \.self) { item in
                                    Text("• \(item)")
                                }
                            }
                        }
                        .padding(.top, 12)
                    }

                    // Steps with numbers
                    if !plan.steps.isEmpty {
                        VStack(alignment: .leading, spacing: 8) {
                            Text("Steps")
                                .font(.headline)
                            ForEach(Array(plan.steps.enumerated()), id: \.offset) { index, step in
                                HStack(alignment: .top, spacing: 8) {
                                    Text("\(index + 1). ")
                                        .fontWeight(.bold)
                                    Text(step)
                                        .multilineTextAlignment(.leading)
                                }
                                .padding(.vertical, 2)
                            }
                        }
                        .padding(.top, 12)
                    }
                } else if isLoadingPlan {
                    ProgressView("Fetching plan…")
                        .frame(maxWidth: .infinity, alignment: .center)
                        .padding(.top, 12)
                } else {
                    Text("Plan not available yet. Check back later.")
                        .foregroundColor(.secondary)
                        .padding(.top, 12)
                }

                Spacer(minLength: 40)
            }
            .padding()
        }
        .navigationTitle("Project Details")
        .navigationBarTitleDisplayMode(.inline)
        .navigationDestination(isPresented: $showDetailedPlan) {
            DetailedBuildPlanView(plan: plan)
        }
        .onAppear {
            Task { await loadPlan() }
        }
        .alert(isPresented: $showAlert) {
            Alert(title: Text("Info"), message: Text(alertMessage), dismissButton: .default(Text("OK")))
        }
    }

    /// Fetch the full plan for this project.  If the plan is missing or not ready,
    /// the function quietly returns without updating the `plan` property.
    @MainActor
    private func loadPlan() async {
        isLoadingPlan = true
        do {
            plan = try await projectsService.fetchPlan(projectId: project.id)
        } catch {
            // When the plan isn’t ready, the backend may return a 404 or empty body.
            // We don’t show an error alert in that case; the UI will show a placeholder instead.
            print("Plan not available yet: \(error.localizedDescription)")
        }
        isLoadingPlan = false
    }
}
