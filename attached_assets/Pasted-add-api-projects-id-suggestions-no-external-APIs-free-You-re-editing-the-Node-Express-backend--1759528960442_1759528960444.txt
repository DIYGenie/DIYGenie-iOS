add /api/projects/:id/suggestions (no external APIs, free)
You’re editing the Node/Express backend. Make all changes ONLY in index.js.

Goal
Add a lightweight suggestions endpoint that generates 4–6 helpful bullets from the project’s description/budget/skill. No external API calls, no costs. Returns JSON like:
{ ok:true, items:["• …","• …"], tags:["modern","medium"], meta:{style:"modern",difficulty:"medium",budget:"$$"} }

Constraints
- Keep existing code intact.
- Use the same TEST_USER_ID “auto” mapping as the rest of the API.
- Endpoint must accept either POST body or query param for user_id, but never require auth.
- Never mutate DB or consume quota.

Implementation
1) Reuse/define helper:
function resolveUserId(raw) {
  const v = (raw || '').trim();
  if (!v || v === 'auto') return process.env.TEST_USER_ID || null;
  return v;
}

2) Add small helpers above the routes section:

function norm(s=''){ return String(s||'').toLowerCase(); }
function inferBudgetLabel(b){
  const t = (b||'').trim();
  if (t.includes('$$$') || t==='$$$') return '$$$';
  if (t.includes('$$') || t==='$$') return '$$';
  if (t.includes('$') || t==='$') return '$';
  return 'flexible';
}
function inferDifficulty(skill){
  const s = norm(skill);
  if (s.includes('begin')) return 'beginner';
  if (s.includes('inter')) return 'medium';
  if (s.includes('adv') || s.includes('expert') || s.includes('pro')) return 'advanced';
  return 'medium';
}
function inferStyle(desc){
  const d = norm(desc);
  if (d.match(/\b(minimal|clean|simple)\b/)) return 'minimal';
  if (d.match(/\b(modern|contemporary)\b/)) return 'modern';
  if (d.match(/\b(rustic|farmhouse)\b/)) return 'rustic';
  if (d.match(/\b(industrial)\b/)) return 'industrial';
  if (d.match(/\b(scandi|scandinavian)\b/)) return 'scandinavian';
  return 'modern';
}
function buildSuggestions({ description, budget, skill }) {
  const diff = inferDifficulty(skill);
  const bud  = inferBudgetLabel(budget);
  const style = inferStyle(description);
  const items = [];

  // universal
  items.push(`Match materials: pick finishes that suit ${style} style.`);
  items.push(`Pre-plan cuts and verify wall studs before mounting.`);
  items.push(`Label hardware and pre-finish small parts to save time.`);

  // difficulty hints
  if (diff === 'beginner') {
    items.push(`Keep joinery simple (pocket screws / brackets); dry-fit before glue.`);
  } else if (diff === 'advanced') {
    items.push(`Use scribe lines and a shooting board for tight reveals.`);
  } else {
    items.push(`Use a square and stop-blocks for consistent repeat cuts.`);
  }

  // budget hints
  if (bud === '$') {
    items.push(`Save costs: pine/ply core + iron-on edge banding, paint to finish.`);
  } else if (bud === '$$$') {
    items.push(`Upgrade: hardwood, hidden fasteners, and a sprayed finish.`);
  } else {
    items.push(`Balance cost: veneered ply shelves with hardwood fronts.`);
  }

  // last one tailored to description
  if (norm(description).includes('shelf') || norm(description).includes('shelves')) {
    items.push(`For floating shelves, use rated concealed brackets and hit studs at 16" OC.`);
  }

  return { items, style, diff, bud };
}

3) Add route near the other /api/projects routes:

app.post('/api/projects/:id/suggestions', async (req, res) => {
  try {
    const { id } = req.params;
    const supabase = req.supabase || global.supabase; // whatever your code uses elsewhere
    const userId = resolveUserId(req.body?.user_id || req.query?.user_id);

    // Load the project to pull name/budget/skill (no auth gating)
    const { data: proj, error } = await supabase
      .from('projects')
      .select('id, name, budget, skill_level, input_image_url')
      .eq('id', id)
      .maybeSingle();

    if (error) throw error;
    if (!proj) return res.status(404).json({ ok:false, error:'not_found' });

    const description = (req.body?.prompt || proj.name || '').trim();
    const budget = proj.budget || req.body?.budget;
    const skill  = proj.skill_level || req.body?.skill;

    const out = buildSuggestions({ description, budget, skill });
    const tags = [out.style, out.diff, out.bud].filter(Boolean);

    return res.json({
      ok: true,
      items: out.items,
      tags,
      meta: {
        style: out.style,
        difficulty: out.diff,
        budget: out.bud,
        hasPhoto: !!proj.input_image_url
      }
    });
  } catch (e) {
    console.error('[SUGGESTIONS] error:', e);
    return res.status(500).json({ ok:false, error: String(e.message || e) });
  }
});

Notes
- No DB writes, no quota usage.
- Safe for both dev and prod.
- Works with user_id:"auto" convention but does not require it.